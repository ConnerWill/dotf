#!/usr/bin/env bash
#shellcheck disable=2148,2059

function dotf(){
  DOTFVERSION="1.0.0"
	DOTFILES="${DOTFILES:-${HOME}/.dotfiles}"
	DOTFILES_WORKTREE="${DOTFILES_WORKTREE:-${HOME}}"
  PROG="dotf"
	dotf_cmd="$(command -v git) --git-dir=${DOTFILES} --work-tree=${DOTFILES_WORKTREE}"

  export DOTFILES DOTFILES_WORKTREE PROG
	local dotf_cmd

###{{{ COLORS

## Check if 'NO_COLOR' environment variable is defined
## if 'NO_COLOR' is defined, do not define color array
NO_COLOR=${NO_COLOR:-""}
if [[ -n ${NO_COLOR} ]]; then
  declare -A colors
  colors[ColorOff]='\e[0m'
  colors[bold]=''
  colors[italic]=''
  colors[underline]=''
  colors[Black]=''
  colors[Gray]=''
  colors[DarkGray]=''
  colors[White]=''
  colors[Red]=''
  colors[Green]=''
  colors[Yellow]=''
  colors[Blue]=''
  colors[Purple]=''
  colors[Magenta]=''
  colors[Cyan]=''
  colors[reset]='\e[0m'
else
  declare -A colors
  colors[ColorOff]='\e[0m'
  colors[bold]='\e[1m'
  colors[italic]='\e[3m'
  colors[underline]='\e[4m'
  colors[Black]='\e[30m'
  colors[Gray]='\e[38;5;245m'
  colors[DarkGray]='\e[38;5;8m'
  colors[White]='\e[38;5;15m'
  colors[Red]='\e[38;5;196m'
  colors[Green]='\e[38;5;46m'
  colors[Yellow]='\e[38;5;190m'
  colors[Blue]='\e[38;5;33m'
  colors[Purple]='\e[38;5;93m'
  colors[Magenta]='\e[38;5;201m'
  colors[Cyan]='\e[38;5;87m'
  colors[reset]='\e[0m'
fi

###}}} COLORS

###{{{ DOTF HELP

  function _dotf_version(){
    printf "%s %s\n" "${PROG}" "${DOTFVERSION}"
  }

  function _dotf_help_name(){
    printf "$(cat <<HELPMENUNAME

${colors[bold]}${colors[Blue]}NAME${colors[reset]}

  ${colors[bold]}${colors[Green]}${PROG}${colors[reset]}


HELPMENUNAME
    )\n\n"
  }

  function _dotf_help(){
    printf "$(cat <<HELPMENU

${colors[bold]}${colors[Blue]}DESCRIPTION${colors[reset]}

  ${colors[White]}Manage, backup, develop, sync your .dotfiles with ease${colors[reset]}


${colors[bold]}${colors[Blue]}USAGE${colors[reset]}

  ${colors[bold]}${colors[Green]}${PROG}${colors[reset]} [-AapufhV] [-a|a|--add|add <files>] [-A|A|--all|all|add-all]
       [-u|u|--up|up|--upload|upload [message]] [--fzf|fzf]
       [-h|h] [--help|help] [-V|--version] [-- <git command|git options>]]

  ${colors[bold]}${colors[Green]}${PROG}${colors[reset]} [-AapufhV]

  ${colors[bold]}${colors[Green]}${PROG}${colors[reset]} [options] [-- <git command|git options>]

  ${colors[bold]}${colors[Green]}${PROG}${colors[reset]} [git subcommand]


${colors[bold]}${colors[Blue]}OPTIONS${colors[reset]}

    add <files>
          Add files to be tracked ${colors[italic]}(git add)${colors[reset]}

    add-all, --add-all, all, --all
          Add all tracked files that have been modified

    -u, u, --up, --upload [message]
          Commit and push changes, including an option commit message

    -- <git commands|git options>
          Run git commands


${colors[bold]}${colors[Blue]}META OPTIONS${colors[reset]}

    -h, h
        Show the help menu

    --help, help
        Show the full ${PROG} help menu

    --usage, usage
        Show ${PROG} usage

    --examples, examples
        Show ${PROG} examples

    -V, --version
        Show ${PROG} version

HELPMENU
    )\n\n"
  }

  function _dotf_help_aliases(){
    printf "$(cat <<HELPMENUALIASES

${colors[bold]}${colors[Blue]}ALIASES${colors[reset]}

  To add convenience when working with ${colors[bold]}${colors[Green]}${PROG}${colors[reset]},
  several aliases exist that are assigned to specific ${colors[bold]}${colors[Green]}${PROG}${colors[reset]} commands.

  Here are the aliases that are currently defined:

    ${colors[Cyan]}d${colors[reset]}         ${colors[DarkGray]}:${colors[reset]} alias for '${colors[bold]}${colors[Green]}${PROG}${colors[reset]}'
    ${colors[Cyan]}dotfa${colors[reset]}     ${colors[DarkGray]}:${colors[reset]} alias for '${colors[bold]}${colors[Green]}${PROG}${colors[reset]} ${colors[Yellow]}add${colors[reset]}'
    ${colors[Cyan]}dotfc${colors[reset]}     ${colors[DarkGray]}:${colors[reset]} alias for '${colors[bold]}${colors[Green]}${PROG}${colors[reset]} ${colors[Yellow]}commit${colors[reset]}'
    ${colors[Cyan]}dotfp${colors[reset]}     ${colors[DarkGray]}:${colors[reset]} alias for '${colors[bold]}${colors[Green]}${PROG}${colors[reset]} ${colors[Yellow]}pull${colors[reset]}'
    ${colors[Cyan]}dotfallup${colors[reset]} ${colors[DarkGray]}:${colors[reset]} alias for '${colors[bold]}${colors[Green]}${PROG}${colors[reset]} ${colors[Yellow]}add-all${colors[reset]} && ${colors[bold]}${colors[Green]}${PROG}${colors[reset]} ${colors[Yellow]}up${colors[reset]}'


HELPMENUALIASES
    )\n\n"
  }


  function _dotf_help_examples(){
    printf "$(cat <<HELPMENUEXAMPLES

${colors[bold]}${colors[Blue]}EXAMPLES${colors[reset]}

  Running '${colors[bold]}${colors[Green]}${PROG}${colors[reset]}' with no subcommands, options, or arguments
  will show the current status of the repository:
     ${colors[italic]}(Equivalent to running: '${colors[bold]}${colors[Green]}${PROG}${colors[reset]} ${colors[Yellow]}status${colors[reset]}${colors[italic]}')${colors[reset]}

    ${colors[DarkGray]}\$${colors[reset]}  ${colors[bold]}${colors[Green]}${PROG}${colors[reset]}


  Adding all modified files currently checked into dotf.
  It will not add new files that are not being tracked.

    ${colors[DarkGray]}\$${colors[reset]}  ${colors[bold]}${colors[Green]}${PROG}${colors[reset]} ${colors[Yellow]}add-all${colors[reset]}


  These next two command will do the exact same thing.
  Showing you how the subcommands/options can be used.

  These examples will commit and push changes to the remote repository
  with a commit message of 'Added help menu to function'

    ${colors[DarkGray]}\$${colors[reset]}  ${colors[bold]}${colors[Green]}${PROG}${colors[reset]} ${colors[Yellow]}upload${colors[reset]} 'Added help menu to function'

    ${colors[DarkGray]}\$${colors[reset]}  ${colors[bold]}${colors[Green]}${PROG}${colors[reset]} ${colors[Yellow]}--upload${colors[reset]}='Added help menutofunctinon'


  This little command is a shorthand way of running multiple commands
  to add all modified files that are checked into ${PROG}, commit changes
  with a commit message of 'Expanded help menu', and then pushing to the remote.

    ${colors[DarkGray]}\$${colors[reset]}  ${colors[bold]}${colors[Green]}${PROG}${colors[reset]} ${colors[Yellow]}a${colors[reset]} && ${colors[bold]}${colors[Green]}${PROG}${colors[reset]} 'Expanded help menu'

HELPMENUEXAMPLES
    )\n\n"
  }

  function _dotf_help_more_info(){
    printf "$(cat <<HELPMENUMOREINFO

${colors[bold]}${colors[Blue]}MORE${colors[reset]}

  For more information, view the README on the ${PROG} repository
  https://github.com/connerwill/${PROG}
HELPMENUMOREINFO
    )\n\n"
  }

  function _dotf_help_full(){
    _dotf_help_name
    _dotf_help
    _dotf_help_aliases
    _dotf_help_examples
    _dotf_help_more_info
  }
#"
###}}} DOTF HELP

###{{{ MESSAGES

 _dotf_msg(){ printf "\x1B[0;1;38;5;93m[%s]\x1B[0m:\t\x1B[0m\t\x1B[0;38;5;8m%s\x1B[0m\n" "${PROG}" "$(date +%Y-%m-%d_%H:%M:%S)"; }
 _dotf_msg_commit(){ printf "\x1B[0;1;48;5;46;38;5;15m[COMMIT]\x1B[0;38;5;46m\tcommiting changes...\n"; }
 _dotf_msg_fail(){ printf "\x1B[0;1;4;48;5;196;38;5;15m[FAILED]\x1B[0m:\t\x1B[0;38;5;196m%s\n" "${@}" ; }

###}}} MESSAGES


  case "${1}" in
      "--help" | "help")
          _dotf_help_full
          return
          ;;
      "-h" | "h")
          _dotf_help_name
          _dotf_help
          printf "\nrun '%s --help' to see the full help menu\n" "${PROG}"
          return
          ;;
      "--usage" | "usage")
          _dotf_help_name
          _dotf_help
          printf "\nrun '%s --help' to see the full help menu\n" "${PROG}"
          return
          ;;
      "--examples" | "examples")
          _dotf_help_name
          _dotf_help_examples
          _dotf_help_more_info
          printf "\nrun '%s --help' to see the full help menu\n" "${PROG}"
          return
          ;;
      "-V" | "--version")
          _dotf_version
          return
          ;;
      "add-all" | "all" | "--all" | "--add-all" )
          $(command -v git) --git-dir="${DOTFILES}" --work-tree="${DOTFILES_WORKTREE}" \
              diff --name-only \
              | xargs -I{} sh -c \
                  "$(command -v git) --git-dir=${DOTFILES} --work-tree=${HOME} add -v ${HOME}/{}"
          ;;
      "pull" | "p" )
          $(command -v git) --git-dir="${DOTFILES}" --work-tree="${DOTFILES_WORKTREE}" \
              pull --stat --verbose
          ;;
      "upload" | "up" )
          $(command -v git) --git-dir="${DOTFILES}" --work-tree="${DOTFILES_WORKTREE}" \
              commit --status --branch --allow-empty-message --verbose -m "${2}"
          $(command -v git) --git-dir="${DOTFILES}" --work-tree="${DOTFILES_WORKTREE}" \
              push --verbose
          shift 2 # Shift 2 positions to account for the subcommand and its argument
          ;;
      *)
          ## If no argument passed, run git status, otherwise pass the command to git
          #shellcheck disable=2015
          [[ $# -gt 0 ]] \
              && $(command -v git) --git-dir="${DOTFILES}" --work-tree="${DOTFILES_WORKTREE}" "${@}" \
              || $(command -v git) --git-dir="${DOTFILES}" --work-tree="${DOTFILES_WORKTREE}" status
          ;;
  esac

}

# Check if the script is being sourced
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
  printf ""
else
  dotf "${@}"
fi
