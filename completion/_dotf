#compdef dotf

# The line above means "This function generates
# completions for dotf."
# The combination of that line, plus the file name
# starting with an `_`, plus having this file's
# parent dir in your `$fpath`, ensures this file
# will be autoloaded when you call `compinit`.

#shellcheck disable=2148,2168,2296

# `+X` makes sure `dotf`'s definition will get
# loaded immediately, even if you have not called
# this function yet.
autoload +X -Uz dotf

_dotf() {
  local -a subcommands
  subcommands=(
    "--help:Show the full help menu"
    "-h:Show help information"
    "--usage:Show usage information"
    "--examples:Show usage examples"
    "-V:Display the version"
    "--version:Display the version"
    "-a:Add all changes to the repository"
    "--all:Add all changes to the repository"
    "--add-all:Add all changes to the repository"
    "-p:Pull changes from the repository"
    "--pull:Pull changes from the repository"
    "-u:Upload changes to the repository"
    "--up:Upload changes to the repository"
    "--upload:Upload changes to the repository"
  )

  #shellcheck disable=2154
  if [[ "$#" -eq 1 && "${words[CURRENT]}" == "dotf" ]]; then
    _arguments -s -S \
      "${subcommands[@]}" \
      "*::git-command:->git"
  else
    _arguments -s -S \
      "${subcommands[@]}" \
      "*::file:_files"
  fi
}

# If the current command is "dotf", complete Git commands
_dotf-git() {
  _arguments -s \
    "1:git-command:($(git --git-dir="${DOTFILES}" --work-tree="${DOTFILES_WORKTREE}" 2>/dev/null | sed -n '1,/^$/s/*\(.*\)/\1/p'))"
}

# Register the completion function
compdef _dotf dotf

_dotf "$@"
